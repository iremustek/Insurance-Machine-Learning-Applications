install.packages('factoextra')
install.packages('ggthemes')
library(dplyr)
library(MVN)
library(ICSNP)
library(stats)
library(factoextra)
library(ggthemes)
set.seed(123)
fviz_nbclust(data1_sc, kmeans, method = "wss")
data
table(data$region)
level(data$region)
levels(data$region)
table(data$region)
unique(data$region)
unique(data$region)
set.seed(123)
fviz_nbclust(data1_sc, kmeans, method = "wss")
unique(data$region)
set.seed(123)
final = kmeans(data1_sc, centers= 8, nstart = 25)
print(final)
set.seed(123)
final = kmeans(data1_sc, centers= 8, nstart = 25)
fviz_cluster(final, data = data1_sc)+theme_economist()
set.seed(123)
split <- initial_split(data1_sc, prop = .8)
library(rsample)
library(rsample)
set.seed(123)
split <- initial_split(data1_sc, prop = .8)
set.seed(123)
split <- initial_split(data1_sc, prop = .8)
data1_sc
split <- initial_split(data.frame(data1_sc), prop = .8)
set.seed(123)
split <- initial_split(data.frame(data1_sc), prop = .8)
train <- training(split)
test  <- testing(split)
dim(train)
dim(test)
set.seed(123)
split <- initial_split(data.frame(data1_sc), prop = .8)
train <- training(split)
test  <- testing(split)
dim(train)
dim(test)
str(data)
str(train)
str(train)
fit_lm = lm(data=train, formula= bmi~.)
summary(fit_lm)
library(MASS)
fit_lm = stepAIC(fit_lm, direction = "backward",trace=FALSE)
summary(fit_lm)
pred = predict(test, fit_lm)
pred = predict(test$bmi, fit_lm)
test
pred = predict(test, fit_lm)
matrix(test)
as.matrix.data.frame(test)
pred = predict(as.matrix.data.frame(test), fit_lm)
pred = predict(fit_lm, as.matrix.data.frame(test))
pred = predict(fit_lm, test)
pred
pred = predict(fit_lm, test)
rmse<-sqrt(mean(pred-test$bmi))
pred = predict(fit_lm, test)
rmse<-sqrt(mean(pred-test$bmi))
pred = predict(fit_lm, test)
rmse<-sqrt(mean(pred-test$bmi))
pred = predict(fit_lm, test)
rmse<-sqrt(mean(pred-test$bmi))
rmse
pred
pred-test$bmi
(mean(pred-test$bmi))
rmse = sqrt(abs((mean(pred-test$bmi))))
rmse
install.packages('Metrics')
library(dplyr)
library(MVN)
library(ICSNP)
library(stats)
library(factoextra)
library(ggthemes)
library(rsample)
library(MASS)
library(Metrics)
rmse(test$bmi, pred)
pred = predict(fit_lm, test)
rmse(test$bmi, pred)
str(train)
fit_lm = lm(data=train, formula= bmi~.)
summary(fit_lm)
fit_lm = stepAIC(fit_lm, direction = "backward",trace=FALSE)
summary(fit_lm)
set.seed(123)
split <- initial_split(data.frame(data_1), prop = .8)
train <- training(split)
test  <- testing(split)
dim(train)
dim(test)
set.seed(123)
split <- initial_split(data_1, prop = .8)
train <- training(split)
test  <- testing(split)
dim(train)
dim(test)
set.seed(123)
split <- initial_split(data_1, prop = .8)
train <- training(split)
test  <- testing(split)
dim(train)
dim(test)
set.seed(123)
split <- initial_split(data_1, prop = .8)
train <- training(split)
test  <- testing(split)
dim(train)
dim(test)
set.seed(123)
split <- initial_split(data_1, prop = .8)
train <- training(split)
test  <- testing(split)
dim(train)
dim(test)
set.seed(123)
split <- initial_split(data_1, prop = .8)
train <- training(split)
test  <- testing(split)
dim(train)
dim(test)
data$sex_n<-ifelse(data$sex=="female",1,0)
data$smoker_n<-ifelse(data$smoker=="yes",1,0)
data1<-data[,-c(2,5,6)]
data1_sc = scale(data1)
head(data1_sc)
unique(data$region)
set.seed(123)
fviz_nbclust(data1_sc, kmeans, method = "wss")
set.seed(123)
final = kmeans(data1_sc, centers= 8, nstart = 25)
fviz_cluster(final, data = data1_sc)+theme_economist()
set.seed(123)
split <- initial_split(data1, prop = .8)
train <- training(split)
test  <- testing(split)
dim(train)
dim(test)
str(train)
fit_lm = lm(data=train, formula= bmi~.)
summary(fit_lm)
fit_lm = stepAIC(fit_lm, direction = "backward",trace=FALSE)
summary(fit_lm)
sqrt(mean(pred-test$bmi))
rmse(test$bmi, pred)
pred = predict(fit_lm, test)
rmse(test$bmi, pred)
sqrt(mean(pred-test$bmi))
pred = predict(fit_lm, test)
rmse(test$bmi, pred)
pred = predict(fit_lm, test)
print('RMSE:',rmse(test$bmi, pred))
return('RMSE:',rmse(test$bmi, pred))
pred = predict(fit_lm, test)
return('RMSE:',rmse(test$bmi, pred))
print('RMSE:',rmse(test$bmi, pred))
mse(test$bmi, pred)
print('RMSE:'rmse(test$bmi, pred))
print('RMSE:',rmse(test$bmi, pred))
print(c('RMSE:',rmse(test$bmi, pred)))
print(RMSE,rmse(test$bmi, pred)))
print(RMSE,rmse(test$bmi, pred)
print(RMSE,rmse(test$bmi, pred))
print("RMSE",rmse(test$bmi, pred))
rmse=rmse(test$bmi, pred)
print("RMSE",rmse)
rmse
library(rpart)
fit_dt = rpart(bmi~., data=train, method='anova') # Since we are dealing with a regression case, we defined method as 'anova'.
rpart.plot(fit_dt)
rpart.plot(fit_dt)
install.packages('rpart.plot')
library(rpart.plot)
fit_dt = rpart(bmi~., data=train, method='anova') # Since we are dealing with a regression case, we defined method as 'anova'.
rpart.plot(fit_dt)
hyper_grid <- expand.grid(
minsplit = seq(5, 20, 1),
maxdepth = seq(8, 15, 1)
)
# total number of combinations
nrow(hyper_grid)
models <- list() #create a list object
for (i in 1:nrow(hyper_grid)) {
# get minsplit, maxdepth values at row i
minsplit <- hyper_grid$minsplit[i]
maxdepth <- hyper_grid$maxdepth[i]
# train a model and store in the list
models[[i]] <- rpart(
formula = bmi ~ .,
data    = train,
method  = "anova",
control = list(minsplit = minsplit, maxdepth = maxdepth)
)
}
# function to get optimal cp
get_cp <- function(x) {
min    <- which.min(x$cptable[, "xerror"])
cp <- x$cptable[min, "CP"]
}
# function to get minimum error
get_min_error <- function(x) {
min    <- which.min(x$cptable[, "xerror"])
xerror <- x$cptable[min, "xerror"]
}
hyper_grid %>%
mutate(
cp    = purrr::map_dbl(models, get_cp),
error = purrr::map_dbl(models, get_min_error)
) %>%
arrange(error) %>%
top_n(-5, wt = error)
hyper_grid <- expand.grid(
minsplit = seq(5, 20, 1),
maxdepth = seq(8, 15, 1)
)
# total number of combinations
nrow(hyper_grid)
models <- list() #create a list object
for (i in 1:nrow(hyper_grid)) {
# get minsplit, maxdepth values at row i
minsplit <- hyper_grid$minsplit[i]
maxdepth <- hyper_grid$maxdepth[i]
# train a model and store in the list
models[[i]] <- rpart(
formula = bmi ~ .,
data    = train,
method  = "anova",
control = list(minsplit = minsplit, maxdepth = maxdepth)
)
}
# function to get optimal cp
get_cp <- function(x) {
min    <- which.min(x$cptable[, "xerror"])
cp <- x$cptable[min, "CP"]
}
# function to get minimum error
get_min_error <- function(x) {
min    <- which.min(x$cptable[, "xerror"])
xerror <- x$cptable[min, "xerror"]
}
hyper_grid %>%
mutate(
cp    = purrr::map_dbl(models, get_cp),
error = purrr::map_dbl(models, get_min_error)
) %>%
arrange(error) %>%
top_n(-5, wt = error)
hyper_grid %>%
mutate(
cp    = purrr::map_dbl(models, get_cp),
error = purrr::map_dbl(models, get_min_error)
) %>%
arrange(error) %>%
top_n(-5, wt = error)
hyper_grid %>%
mutate(
cp    = purrr::map_dbl(models, get_cp),
error = purrr::map_dbl(models, get_min_error)
) %>%
arrange(error) %>%
top_n(-5, wt = error)
optimal_tree <- rpart(
formula = bmi ~ .,
data    = train,
method  = "anova",
control = list(minsplit = 11, maxdepth = 14, cp = 0.01)
)
pred <- predict(optimal_tree, newdata = test)
rmse(test$bmi,pred)
# make bootstrapping reproducible
set.seed(123)
# make bootstrapping reproducible
set.seed(123)
# train bagged model
bagged_m1 <- bagging(
formula = bmi ~ .,
data    = train,
coob    = TRUE
)
install.packages('ipred')
ipred
library(ipred)
# make bootstrapping reproducible
set.seed(123)
# train bagged model
bagged_m1 <- bagging(
formula = bmi ~ .,
data    = train,
coob    = TRUE
)
bagged_m1
library(caret)
install.packages('caret')
library(caret)
ctrl <- trainControl(method = "cv",  number = 10)
# CV bagged model
bagged_cv <- train(
bmi ~ .,
data = train,
method = "treebag",
trControl = ctrl,
importance = TRUE
)
# assess results
bagged_cv
plot(varImp(bagged_cv), 20)
# assess 10-50 bagged trees
ntree <- 10:50
# create empty vector to store OOB RMSE values
rmse <- vector(mode = "numeric", length = length(ntree))
for (i in seq_along(ntree)) {
# reproducibility
set.seed(123)
# perform bagged model
model <- bagging(
formula = bmi ~ .,
data    = train,
coob    = TRUE,
nbagg   = ntree[i]
)
# get OOB error
rmse[i] <- model$err
}
plot(ntree, rmse, type = 'l', lwd = 2)
abline(v = 25, col = "red", lty = "dashed")
rmse
mean(rmse)
rmse(test$bmi, predict(bagged_cv,test))
# assess 10-50 bagged trees
ntree <- 10:50
# create empty vector to store OOB RMSE values
rmse <- vector(mode = "numeric", length = length(ntree))
for (i in seq_along(ntree)) {
# reproducibility
set.seed(123)
# perform bagged model
model <- bagging(
formula = bmi ~ .,
data    = train,
coob    = TRUE,
nbagg   = ntree[i]
)
# get OOB error
rmse[i] <- model$err
}
plot(ntree, rmse, type = 'l', lwd = 2)
abline(v = 25, col = "red", lty = "dashed")
mean(rmse)
rmse(test$bmi, predict(bagged_cv,test))
# assess 10-50 bagged trees
ntree <- 10:50
# create empty vector to store OOB RMSE values
rmse <- vector(mode = "numeric", length = length(ntree))
for (i in seq_along(ntree)) {
# reproducibility
set.seed(123)
# perform bagged model
model <- bagging(
formula = bmi ~ .,
data    = train,
coob    = TRUE,
nbagg   = ntree[i]
)
# get OOB error
rmse[i] <- model$err
}
plot(ntree, rmse, type = 'l', lwd = 2)
abline(v = 25, col = "red", lty = "dashed")
rmse(test$bmi, predict(bagged_cv,test))
rmse
rmse(test$bmi, predict(bagged_cv,test))
data_a =  data %>% select(bmi,charges)
data = read.csv("insurance.csv")
head(data)
str(data)
dim(data)
# Necessary Libraries
library(dplyr)
data_a =  data %>% select(bmi,charges)
library(tidyverse)
data_a =  data %>% select(bmi,charges)
data_a =  data %>% select(bmi,charges)
data_a =  data %>% select(bmi,charges)
data_a =  data %>% select(bmi,charges)
# Necessary Libraries
library(dplyr)
library(tidyverse)
library(MVN)
library(ICSNP)
library(stats)
library(factoextra)
library(ggthemes)
library(rsample)
library(rpart)
library(rpart.plot)
library(MASS)
library(Metrics)
library(caret)
data = read.csv("insurance.csv")
head(data)
str(data)
dim(data)
data_a =  data %>% select(bmi,charges)
data %>% select(bmi,charges)
data_a =  data %>% select(c(bmi,charges))
data_a =  data %>% select(bmi,charges)
data
data_a =  data %>% select(bmi)
data_a =  data %>% select('bmi')
data %>% select_(bmi)
data_a =  data %>% select(bmi&charges)
data_a =  data %>% select(bmi,charges)
data %>% select(bmi,charges)
data
data_a = data[,c(3,7)]
head(data_a)
# assess 10-50 bagged trees
ntree <- 10:50
# create empty vector to store OOB RMSE values
rmse <- vector(mode = "numeric", length = length(ntree))
for (i in seq_along(ntree)) {
# reproducibility
set.seed(123)
# perform bagged model
model <- bagging(
formula = bmi ~ .,
data    = train,
coob    = TRUE,
nbagg   = ntree[i]
)
# get OOB error
rmse[i] <- model$err
}
plot(ntree, rmse, type = 'l', lwd = 2)
abline(v = 25, col = "red", lty = "dashed")
install.packages("prettydoc")
library(prettydoc)
knitr::opts_chunk$set(echo = TRUE)
# Necessary Libraries
library(dplyr)
library(tidyverse)
library(MVN)
library(ICSNP)
library(stats)
library(factoextra)
library(ggthemes)
library(rsample)
library(rpart)
library(rpart.plot)
library(MASS)
library(Metrics)
library(caret)
library(ipred)
# Necessary Libraries
library(dplyr)
library(tidyverse)
library(MVN)
library(ICSNP)
library(stats)
library(factoextra)
library(ggthemes)
library(rsample)
library(rpart)
library(rpart.plot)
library(MASS)
library(Metrics)
library(caret)
library(ipred)
# Necessary Libraries
library(dplyr, warn.conflicts=F, quietly=T)
library(tidyverse, warn.conflicts=F, quietly=T)
library(MVN, warn.conflicts=F, quietly=T)
library(ICSNP, warn.conflicts=F, quietly=T)
library(stats, warn.conflicts=F, quietly=T)
library(factoextra, warn.conflicts=F, quietly=T)
library(ggthemes, warn.conflicts=F, quietly=T)
library(rsample, warn.conflicts=F, quietly=T)
library(rpart, warn.conflicts=F, quietly=T)
library(rpart.plot, warn.conflicts=F, quietly=T)
library(MASS, warn.conflicts=F, quietly=T)
library(Metrics, warn.conflicts=F, quietly=T)
library(caret, warn.conflicts=F, quietly=T)
library(ipred, warn.conflicts=F, quietly=T)
```{r, echo=FALSE}
# Necessary Libraries
library(dplyr, warn.conflicts=F, quietly=T)
library(tidyverse, warn.conflicts=F, quietly=T)
library(MVN, warn.conflicts=F, quietly=T)
library(ICSNP, warn.conflicts=F, quietly=T)
library(stats, warn.conflicts=F, quietly=T)
library(factoextra, warn.conflicts=F, quietly=T)
library(ggthemes, warn.conflicts=F, quietly=T)
library(rsample, warn.conflicts=F, quietly=T)
library(rpart, warn.conflicts=F, quietly=T)
library(rpart.plot, warn.conflicts=F, quietly=T)
library(MASS, warn.conflicts=F, quietly=T)
library(Metrics, warn.conflicts=F, quietly=T)
library(caret, warn.conflicts=F, quietly=T)
library(ipred, warn.conflicts=F, quietly=T)
